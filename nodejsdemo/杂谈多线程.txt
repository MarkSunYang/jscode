实现多线程：
1.支持中断，保护线程
2.多进程优先算法
3.时间片轮转


时间片轮转（Round-Robin）：
时间片轮转（Round-Robin）调度算法是操作系统一种比较公平的进程调度的方式，
这种方式使得就绪队列上的所有进程在每次轮转时都可以运行相同的一个时间片。

基本原理：按进程到达顺序（FCFS first come, first Served）,将进程一次加入到就绪队列中
然后将cpu分配给队首的进程，确定一个时间片，让进程执行该时间片，
当 进程可能已执行完毕（可能在时间片未到时就执行完毕，或者未执行完毕）
如果是前者只需要将进程弹出队列即可，如果是后者则将该进程加入队尾，并将cpu分配给新的队首进程，如此循环

进程切换时机：
进程在执行时分为两种:
1.该时间片内，进程执行完毕，该情况，立刻弹出该进程，并把cpu分给新的队首进程
2.该时间片内，进程未执行完毕，调度程序立刻中断，把该程序加入队尾，并将cpu分配给新的队首进程

时间片大小的确定：
RR算法中，时间片的大小直接影响了系统的性能
1.时间片过小，有利于短作业，频繁切换进程，增加了系统的开销
2.时间片过大，算法退化成FCFS如果某个短作业进程之间的作业都是长作业，导致后面短作业长时间等待

算法计算：
周转时间=进程完成时间-进程到达时间
带权周转时间=进程周转时间/进程实际运行时间
平均周转时间=（进程1转轴时间+....进程n周转时间）/n
平均带权周转时间=（进程1带权周转时间+进程2带权周转时间）/2


