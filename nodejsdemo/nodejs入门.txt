1.提供web页面，因此需要http服务器2
2.通过路由处理对应的情i去处理程序 request handler
3.最终请求处理程序
4.路由能够处理POST数据，并且把数据封装成更友好的格式
5.内容显示
6.数据图片上传


1.Node.js简介
websocket
tpc/udp
命令行工具
交互式终端

node.js内建服务器支持，在使用nodejs的时候不需要额外的http服务器

Node.js的性能
异步IO和事件驱动
Nodejs的最大特点就是采用异步I/O时间驱动的架构设计
对于高并发的解决方案，传统的机构是多线程模型，
js是单线程的，nodejs使用的也是单线程模型
对所有的IO都采用了异步式的请求方式，避免了上下文的频繁的切换
nodejs在执行的过程中会维护一个事件队列，程序在执行的时候进入循环，等待下一个事件的到来
每个异步式io请求完成会被推送到事件队列

res=db.query('select * from table')
res.output
以上代码在执行第一行的时候，线程会阻塞，等待数据库返回查询结果，
然后继续处理，然而，由于数据库查询设计磁盘读写和网络通信，线程阻塞等待返回结果
对于高并发的访问，一方面线程长时间阻塞，另一方面，为了应付新请求而不断增加新的线程
因此会浪费大量的系统资源，同事也会占用大量的cpu的时间来处理内存上下文切换

nodejs解决方案：
db.query('select * from table',function(res){
    res.output();
})
这段代码中，db.query的第二个参数是一个函数，我们成为回调函数，进程在执db.query的时候，不会等待返回结果
而是直接继续执行后面的语句，知道事件循环。当数据库返回结果时，事件发送到事件队列，等到线程进入事件循环后，
才会调用之前的回调函数继续执行后面的逻辑。
nodejs的异步机制是基于事件的，

2.安装和配置Node.js

3.Node.js的快速入门
异步式I/O与事件编程
模块和包


4.Node.js核心模块

5.Node.jsweb开发

